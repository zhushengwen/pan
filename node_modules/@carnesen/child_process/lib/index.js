'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = undefined;

let exec = exports.exec = (() => {
  var _ref = _asyncToGenerator(function* (...args) {
    try {
      const [stdout, stderr] = yield execAsPromised(...args);
      return { stdout, stderr };
    } catch (ex) {
      const [err, stdout, stderr] = ex;
      err.stdout = stdout;
      err.stderr = stderr;
      throw err;
    }
  });

  return function exec(_x) {
    return _ref.apply(this, arguments);
  };
})();

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _util = require('@carnesen/util');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const execAsPromised = (0, _util.promisify)(cp.exec, { resolveArray: true, rejectArray: true });