'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isDefined = isDefined;
exports.isEmptyObject = isEmptyObject;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isPositiveNumber = isPositiveNumber;
exports.isString = isString;
exports.isUndefined = isUndefined;
exports.throwIfNotNonEmptyString = throwIfNotNonEmptyString;
exports.throwIf = throwIf;
exports.throwIfEmptyObject = throwIfEmptyObject;
exports.throwIfNot = throwIfNot;
exports.throwIfNotArray = throwIfNotArray;
exports.throwIfNotBoolean = throwIfNotBoolean;
exports.throwIfNotFunction = throwIfNotFunction;
exports.throwIfNotObject = throwIfNotObject;
exports.throwIfNotPositiveNumber = throwIfNotPositiveNumber;
exports.throwIfNotString = throwIfNotString;
exports.throwIfNotNonEmptyObject = throwIfNotNonEmptyObject;
exports.throwIfDefined = throwIfDefined;
exports.throwIfUndefined = throwIfUndefined;
exports.throwIfNotValidSemver = throwIfNotValidSemver;

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function startsWithVowel(str) {
  return (/^[aeiou]$/i.test(str)
  );
}

function makeExpectedError(value, name, typeString) {
  var an = startsWithVowel(typeString) ? 'an' : 'a';
  var message = 'Expected argument "' + name + '" to be ' + an + ' ' + typeString + '. Got ' + value;
  return new Error(message);
}

function isArray(value) {
  return Array.isArray(value);
}

function isBoolean(value) {
  return typeof value === 'boolean';
}

function isDefined(value) {
  return !isUndefined(value);
}

function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0 && value.constructor === Object;
}

function isFunction(value) {
  return typeof value === 'function';
}

function isNumber(value) {
  return typeof value === 'number' && !isNaN(value);
}

function isObject(value) {
  return value === Object(value);
}

function isPositiveNumber(value) {
  return isNumber(value) && value > 0;
}

function isString(value) {
  return typeof value === 'string';
}

function isUndefined(value) {
  return typeof value === 'undefined';
}

function throwIfNotNonEmptyString(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!(isString(value) && value.length > 0)) {
    throw makeExpectedError(value, name, 'non-empty string');
  }
}

function throwIf(condition, message) {
  if (condition) {
    throw new Error(message);
  }
}

function throwIfEmptyObject(value, name) {
  if (isEmptyObject(value)) {
    throw makeExpectedError(value, name, 'not to be an empty object');
  }
}

function throwIfNot(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

function throwIfNotArray(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isArray(value)) {
    throw makeExpectedError(value, name, 'array');
  }
}

function throwIfNotBoolean(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isBoolean(value)) {
    throw makeExpectedError(value, name, 'boolean');
  }
}

function throwIfNotFunction(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isFunction(value)) {
    throw makeExpectedError(value, name, 'function');
  }
}

function throwIfNotObject(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isObject(value)) {
    throw makeExpectedError(value, name, 'object');
  }
}

function throwIfNotPositiveNumber(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isPositiveNumber(value)) {
    throw makeExpectedError(value, name, 'positive number');
  }
}

function throwIfNotString(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!isString(value)) {
    throw makeExpectedError(value, name, 'string');
  }
}

function throwIfNotNonEmptyObject(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!(isObject(value) && !isEmptyObject(value))) {
    throw makeExpectedError(value, name, 'non-empty object');
  }
}

function throwIfDefined(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (isDefined(value)) {
    throw makeExpectedError(value, name, 'undefined value');
  }
}

function throwIfUndefined(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (isUndefined(value)) {
    throw makeExpectedError(value, name, 'defined value');
  }
}

function throwIfNotValidSemver(value) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  if (!_semver2.default.valid(value)) {
    throw makeExpectedError(value, name);
  }
}